name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  rubocop:
    runs-on: ubuntu-latest
    name: RuboCop
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true

      - name: Run RuboCop
        run: bundle exec rubocop --parallel

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby-version: ['3.1', '3.2', '3.3']
        rails-version: ['7.1', '8.0']
        database: ['postgresql', 'mysql', 'sqlite3']
        exclude:
          # Exclude some combinations to reduce CI time
          - ruby-version: '3.1'
            rails-version: '8.0'
          - database: 'mysql'
            ruby-version: '3.1'

    name: Ruby ${{ matrix.ruby-version }}, Rails ${{ matrix.rails-version }}, ${{ matrix.database }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rama_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: rama_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev mysql-client libmysqlclient-dev

      - name: Set up database environment
        run: |
          case "${{ matrix.database }}" in
            postgresql)
              echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/rama_test" >> $GITHUB_ENV
              echo "DB_ADAPTER=postgresql" >> $GITHUB_ENV
              ;;
            mysql)
              echo "DATABASE_URL=mysql2://root:root@localhost:3306/rama_test" >> $GITHUB_ENV
              echo "DB_ADAPTER=mysql2" >> $GITHUB_ENV
              ;;
            sqlite3)
              echo "DATABASE_URL=sqlite3:db/test.sqlite3" >> $GITHUB_ENV
              echo "DB_ADAPTER=sqlite3" >> $GITHUB_ENV
              ;;
          esac
          echo "RAILS_VERSION=${{ matrix.rails-version }}" >> $GITHUB_ENV

      - name: Create database
        run: |
          cd spec/dummy
          case "${{ matrix.database }}" in
            postgresql)
              PGPASSWORD=postgres createdb -h localhost -U postgres rama_test || true
              ;;
            mysql)
              mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS rama_test;"
              ;;
            sqlite3)
              # SQLite database will be created automatically
              ;;
          esac

      - name: Set up test database
        run: |
          cd spec/dummy
          bundle exec rails db:migrate RAILS_ENV=test
        env:
          RAILS_ENV: test

      - name: Run unit tests
        run: bundle exec rspec spec/lib/ spec/models/ spec/components/ --format progress
        env:
          RAILS_ENV: test
          COVERAGE: true

      - name: Run integration tests
        run: bundle exec rspec spec/features/ spec/requests/ --format progress
        env:
          RAILS_ENV: test

      - name: Run performance tests
        run: bundle exec rspec spec/performance/ --format progress
        env:
          RAILS_ENV: test
        if: matrix.ruby-version == '3.2' && matrix.rails-version == '8.0' && matrix.database == 'postgresql'

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage.xml
          flags: unittests
          name: codecov-umbrella
        if: matrix.ruby-version == '3.2' && matrix.rails-version == '8.0' && matrix.database == 'postgresql'

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true

      - name: Run Brakeman security scan
        run: |
          gem install brakeman
          brakeman --no-pager --format json --output brakeman-report.json || true

      - name: Run bundle audit
        run: |
          gem install bundler-audit
          bundle audit --update

  build:
    runs-on: ubuntu-latest
    name: Build Gem
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true

      - name: Build gem
        run: gem build rama.gemspec

      - name: Upload gem artifact
        uses: actions/upload-artifact@v3
        with:
          name: rama-gem
          path: rama-*.gem

  demo:
    runs-on: ubuntu-latest
    name: Demo Application
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true

      - name: Create demo application
        run: |
          rake demo:setup
          cd demo_app
          bundle exec rails db:create db:migrate
          bundle exec rails runner "
            User.create!(name: 'Admin User', email: 'admin@example.com', role: 'admin')
            10.times { |i| User.create!(name: \"User #{i}\", email: \"user#{i}@example.com\") }
          "

      - name: Test demo application
        run: |
          cd demo_app
          timeout 30s bundle exec rails server -p 3000 &
          sleep 10
          curl -f http://localhost:3000/admin || exit 1
